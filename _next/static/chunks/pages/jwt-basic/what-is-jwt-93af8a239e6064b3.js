(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[216],{7038:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/jwt-basic/what-is-jwt",function(){return t(9191)}])},9191:function(e,n,t){"use strict";t.r(n),t.d(n,{__toc:function(){return c}});var a=t(5893),i=t(2673),s=t(373),r=t(8426);t(9128);var l=t(2643);let c=[{depth:2,value:"JWT 의 개념",id:"jwt-의-개념"},{depth:2,value:"JWT 란?",id:"jwt-란"},{depth:2,value:"JWT 의 구조",id:"jwt-의-구조"},{depth:3,value:'header (헤더) - "어떤 알고리즘을 사용해서 서명을 했는지"',id:"header-헤더---어떤-알고리즘을-사용해서-서명을-했는지"},{depth:3,value:'payload (페이로드) - "JWT에 실어보낼 페이로드"',id:"payload-페이로드---jwt에-실어보낼-페이로드"},{depth:3,value:"Signature (서명)",id:"signature-서명"}];function _createMdxContent(e){let n=Object.assign({h2:"h2",p:"p",ul:"ul",li:"li",a:"a",strong:"strong",code:"code",h3:"h3",pre:"pre",span:"span",blockquote:"blockquote"},(0,l.a)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"jwt-의-개념",children:"JWT 의 개념"}),"\n",(0,a.jsx)(n.p,{children:"참고한 자료는 아래와 같습니다. 아래 자료의 내용을 일부 의역 + 요약했습니다."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://jwt.io/introduction",children:"http://jwt.io/introduction"})}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h2,{id:"jwt-란",children:"JWT 란?"}),"\n",(0,a.jsxs)(n.p,{children:['JWT 는 RFC7519 로 등록된 하나의 기술 표준인데 사전적 정의는 "당사자 간에 정보를 JSON 개체로 안전하게 전송하기 위한 간결하고 독립적인 방법을 정의하는 개방형 표준(RFC7519)" 입니다.',(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["주로 HMAC 알고리즘 또는 RSA 알고리즘을 통해 인코딩/디코딩을 합니다. JWT는 '서명된 토큰'에 중점을 둡니다. 당사자 간에 Secret 을 제공할 수도 있지만 '서명된 토큰'을 주고받는 것에 중점을 두고 있습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["서명된 토큰에는 이 토큰 내에 포함된 어떤 정보(=클레임)의 무결성을 확인할 수 있게 해줍니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["개인적인 경험으로는 JWT 내에 여러가지 값을 넣을 수도 있지만 주로 변하지 않을 값들 (id, email) 등과 같은 값을 넣어두는게 좋고 자주 변하는 값 (profileImageId, phoneNumber 등) 과 같은 값들을 넣어두는 것은 비즈니스 요구사항 발생시 앱 재배포 이슈까지 따라올 수 있기에 좋지 않은 선택입니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h2,{id:"jwt-의-구조",children:"JWT 의 구조"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"JWT 는 헤더, 페이로드, 서명(Signature)"})," 로 구성됩니다.",(0,a.jsx)("br",{}),"\r\n예를 들면 ",(0,a.jsx)(n.code,{children:"."})," 으로 구분된 아래와 같은 형식으로 구성됩니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"{header}.{Payload}.{Signature}"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"xxxxx.yyyyy.zzzzz"})}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(n.h3,{id:"header-헤더---어떤-알고리즘을-사용해서-서명을-했는지",children:[(0,a.jsx)(n.code,{children:"header"}),' (헤더) - "어떤 알고리즘을 사용해서 서명을 했는지"']}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"header"})," 는 아래와 같은 구조의 문자열로 구성되는데, 이 문자열을 Base64 URL 로 인코딩해서 JWT 의 첫번째 부분에 지정합니다."]}),"\n",(0,a.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,a.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,a.jsx)(n.span,{className:"line",children:(0,a.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"{"})}),"\n",(0,a.jsx)(n.span,{className:"line",children:(0,a.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:'    "alg": "HS256",'})}),"\n",(0,a.jsx)(n.span,{className:"line",children:(0,a.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:'    "typ": "JWT"'})}),"\n",(0,a.jsx)(n.span,{className:"line",children:(0,a.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(n.h3,{id:"payload-페이로드---jwt에-실어보낼-페이로드",children:[(0,a.jsx)(n.code,{children:"payload"}),' (페이로드) - "JWT에 실어보낼 페이로드"']}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"페이로드는 클레임들의 집합입니다."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"e.g."}),"\n",(0,a.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,a.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,a.jsx)(n.span,{className:"line",children:(0,a.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"{"})}),"\n",(0,a.jsx)(n.span,{className:"line",children:(0,a.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:'  "sub": "1234567890", // 등록된 클레임'})}),"\n",(0,a.jsx)(n.span,{className:"line",children:(0,a.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:'  "name": "John Doe", // 개인클레임 '})}),"\n",(0,a.jsx)(n.span,{className:"line",children:(0,a.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:'  "admin": true // 개인클레임'})}),"\n",(0,a.jsx)(n.span,{className:"line",children:(0,a.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,a.jsxs)(n.p,{children:["페이로드에는 클레임을 포함하고 있습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["클레임은 일종의 ",(0,a.jsx)(n.strong,{children:"엔티티 및 부가정보에 대한 선언문"}),"이라고 생각하면 됩니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["클레임의 유형은 3가지가 있습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Registered Claim","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"필수는 아닙니다. 하지만 권장됩니다."}),"\n",(0,a.jsx)(n.li,{children:"Claim 들의 집합인데, 권장되는 Claim 들의 집합입니다. 필수는 아닙니다."}),"\n",(0,a.jsx)(n.li,{children:"안넣어도 되고, 엄청 중요한 것은 아닙니다."}),"\n",(0,a.jsxs)(n.li,{children:["e.g. iss(issuer), exp(expiration time), sub(subject), aud(audience), ",(0,a.jsx)(n.a,{href:"https://www.rfc-editor.org/rfc/rfc7519#section-4.1",children:"그 외 기타"})]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"Public Claim"}),"\n",(0,a.jsxs)(n.li,{children:["Private Claim","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"개인이 필요할 때 만들어서 추가해서 넣을 수 있는 클레임입니다."}),"\n",(0,a.jsx)(n.li,{children:"사용자임을 식별할 수 있는 어떠한 primary key 같은 것들을 Primary Claim 에 넣는 경우가 많습니다."}),"\n",(0,a.jsx)(n.li,{children:"개인적으로 추가되는 정보임을 나타내는 정보"}),"\n",(0,a.jsx)(n.li,{children:'e.g. "user_id" : 1'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.p,{children:"핵심은 페이로드에 무엇을 넣는지입니다. 그 중 가장 중요한 것은 Private Claim (개인 클레임) 입니다. 예를 들면 이 개인 클레임(Private Claim)에는 user_id 나 primary_key 같은 식별 가능한 키를 암호화해서 넣는 편입니다."}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(n.h3,{id:"signature-서명",children:[(0,a.jsx)(n.code,{children:"Signature"})," (서명)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"header"}),", payload 와 secret(개인키, 일반적으로 서버에서 따로 보안된 위치에 따로 보관)를 HMAC 으로 암호화하는 것을 의미합니다. HS256 이라는 것은 HMAC SHA 256 이라는 알고리즘을 의미합니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"secret"})," 이라는 것은 사용자가 지정한 임의의 문자열입니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["예를 들면 'abcdefghijklmnopqrstuvwxyz1234567' 같은 문자열을 팀에서 키를 조합할때 사용할 비밀키로 지정했을 때 이 'abcdefghijklmnopqrstuvwxyz1234567 라는 문자열과 ",(0,a.jsx)(n.code,{children:"header"}),", ",(0,a.jsx)(n.code,{children:"payload"})," 값을 HMACSHA256 함수에 인자로 해서 생성하면 서명된 문자열이 도출됩니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["이것을 서명이라고 이야기합니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["JWT 의 헤더는 아래와 같이 구성되는데 ",(0,a.jsx)(n.code,{children:'"alg" : "HS256"'})," 이라는 것은 알고리즘으로 ",(0,a.jsx)(n.code,{children:"HMAC SHA 256"})," 이라는 알고리즘을 사용하겠다는 것을 의미합니다."]}),"\n",(0,a.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,a.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,a.jsx)(n.span,{className:"line",children:(0,a.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"{"})}),"\n",(0,a.jsx)(n.span,{className:"line",children:(0,a.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:'    "alg": "HS256",'})}),"\n",(0,a.jsx)(n.span,{className:"line",children:(0,a.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:'    "typ": "JWT"'})}),"\n",(0,a.jsx)(n.span,{className:"line",children:(0,a.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,a.jsx)("br",{})]})}let d={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.a)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/jwt-basic/what-is-jwt.mdx",route:"/jwt-basic/what-is-jwt",timestamp:1709522096e3,pageMap:[{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"jwt-authentication-manager-way",route:"/jwt-authentication-manager-way",children:[{kind:"MdxPage",name:"jwt-authentication-example",route:"/jwt-authentication-manager-way/jwt-authentication-example"},{kind:"MdxPage",name:"security-auth-communication",route:"/jwt-authentication-manager-way/security-auth-communication"},{kind:"Meta",data:{"jwt-authentication-example":"JWT 인증 예제","security-auth-communication":"시큐리티 인증 클래스들의 상호작용"}}]},{kind:"Folder",name:"jwt-basic",route:"/jwt-basic",children:[{kind:"MdxPage",name:"jwt-generate-degenerate-example",route:"/jwt-basic/jwt-generate-degenerate-example"},{kind:"MdxPage",name:"what-is-jwt",route:"/jwt-basic/what-is-jwt"},{kind:"Meta",data:{"what-is-jwt":"JWT 란?","jwt-generate-degenerate-example":"JWT 생성, 분해 예제"}}]},{kind:"Folder",name:"oauth2",route:"/oauth2",children:[{kind:"MdxPage",name:"Intro",route:"/oauth2/Intro"},{kind:"Meta",data:{intro:"Intro",Intro:"Intro"}}]},{kind:"Folder",name:"servlet-security-auth",route:"/servlet-security-auth",children:[{kind:"MdxPage",name:"intro",route:"/servlet-security-auth/intro"},{kind:"Meta",data:{intro:"Intro"}}]},{kind:"Meta",data:{index:"Introduction","jwt-basic":"JWT 개념","jwt-authentication-manager-way":"AuthenticationManager 방식의 JWT  인증",oauth2:"OAuth2","servlet-security-auth":"servlet 기반의 시큐리티 JWT 인증",contact:{title:"Contact ↗",type:"page",href:"-",newWindow:!0}}}],flexsearch:{codeblocks:!0},title:"What Is JWT",headings:c},pageNextRoute:"/jwt-basic/what-is-jwt",nextraLayout:s.ZP,themeConfig:r.Z};n.default=(0,i.j)(d)},8426:function(e,n,t){"use strict";var a=t(5893);t(7294);let i={logo:(0,a.jsx)("span",{children:"Docs Webflux Spring Security"}),project:{link:"https://github.com/chagchagchag/docs-webflux-spring-security"},docsRepositoryBase:"https://github.com/chagchagchag/docs-webflux-spring-security",footer:{text:"Nextra Docs Template"}};n.Z=i},5789:function(){}},function(e){e.O(0,[774,796,888,179],function(){return e(e.s=7038)}),_N_E=e.O()}]);